import json
import os
import logging
import requests
from pathlib import Path
from uuid import uuid4
from zipfile import ZipFile, BadZipfile
from conf import collection, logger

logger = logger
class Cve:
    def __init__(self, year='None', cve_id='None'):
        self.year = year
        self.cve_id = cve_id


    @staticmethod
    def request_cve_data(year):
        url_body = 'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-'
        url = url_body + str(year) + '.json.zip'
        path = os.getcwd()
        filename_zip = url.split("/")[-1]
        filepath_zip = path + "/" + filename_zip
        print(filepath_zip)
        logging.info("start requesting nvd nist zip from {}".format(url))
        r = requests.get(url)
        os.makedirs(path, exist_ok=True)
        open(filepath_zip, 'wb').write(r.content)
        logging.info("Downloaded {} to {}. size:{} ".format(url, filepath_zip, Path(filepath_zip).stat().st_size))
        if Path(filepath_zip).stat().st_size < 1:
            if os.path.exists(filepath_zip):
                os.remove(filepath_zip)
            raise Exception("{} could not be downloaded".format(filepath_zip))
        logging.info("Saved nvd nist zip '{}'".format(filepath_zip))
        return filepath_zip

    @staticmethod
    def parse_cve_data(path, year=None):
        # open zip file and process data inside
        try:
            logging.info("Unzip {}".format(path))
            with ZipFile(path) as zip_file:
                path_json = path.split('/')[-1].replace('.zip', '')
                with zip_file.open(path_json) as file:
                    data = json.loads(file.read())
                    logging.info("JSON file {} is ready".format(path))

            logging.info("Start parsing data")

            items = data['CVE_Items']

            logging.info("Found {} CVE items to parse".format(len(items)))
            results = []
            for item in items:
                logging.debug("{}".format(item['cve']['CVE_data_meta']['ID']))

                item['cve_id'] = item['cve']['CVE_data_meta']['ID']
                item['year'] = year
                item['uuid'] = str(uuid4())
                item['src'] = "NIST_NVD_CVE"
                item['type'] = 'cve'

                if 'publishedDate' in item:
                    item['published_at'] = item.pop('publishedDate')
                if 'lastModifiedDate' in item:
                    item['last_modified_at'] = item.pop('lastModifiedDate')
                if 'created_at' in item:
                    item.pop('created_at')
                if '_id' in item:
                    item.pop('_id')
                if 'id' in item:
                    item.pop('id')

                results.append(results)
        except BadZipfile as e:
            logging.error("File '{}' is not a zip file. {}".format(path, e))

        if os.path.exists(path):
            os.remove(path)
        else:
            logging.info("file does not exist")

        logging.info("finished parsing data")
        return results

    @staticmethod
    def insert_into_db(results):
        collection.insert_many(results)
        return 'Added {} new cve items to the db'.format(len(results))

    @staticmethod
    def cve_to_db(year):
        cve = Cve(year=year)
        path = cve.request_cve_data(cve.year)
        results = cve.parse_cve_data(path, cve.year)
        logging_msg = cve.insert_into_db(results)
        return logging_msg

    @staticmethod
    def get_cve_from_db(cve_id):
        cve = Cve(cve_id = cve_id)
        element = collection.find_one({'cve_id': cve.cve_id})
        if element:
            return 'Found element {} in db: {}'.format(cve.cve_id, element)
        else:
            return 'Did not found element {} in the db. Try to add the specific year to the db.'