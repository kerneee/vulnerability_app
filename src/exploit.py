# imports
import logging
import requests
from datetime import datetime
try:
    from db_conf import collection
except ModuleNotFoundError:
    print('Could not import module conf. If this is a unit test, you can ignore the messsage.')
    collection = None
import re
from bs4 import BeautifulSoup

class Exploit:
    def __init__(self, ebd_id):
        self.ebd_id = ebd_id
        self.headers = {
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9.',
            'Accept-Language': 'de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7',
            'Pragma': 'no-cache',
            'referer': 'https://www.exploit-db.com/',
            'user-agent': 'Mozilla/5.0 (X11; U; Linux; de-DE) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.8.0'
        }

    def request_exploit_data(self):
        default_headers = self.headers
        url_body = 'https://www.exploit-db.com/exploits/'
        url = url_body + str(self.ebd_id)
        request = requests.get(url, headers=default_headers)
        return request
    

    @staticmethod
    def parse_exploit_data(request):
        r = request
        soup = BeautifulSoup(r.content, 'html.parser')
        title = soup.find('h1').text.strip()
        elements = soup.find_all('div', {'class': 'col-6 text-center'})
        ebd_id = None
        type = None
        platform = None
        date = None

        for element in elements:
            if 'EDB-ID' in element.text:
                ebd_id = element.text.replace('EDB-ID:', '').strip()

            if 'Type' in element.text:
                type = element.text.replace('Type:', '').strip()

            if 'Platform' in element.text:
                platform = element.text.replace('Platform:', '').strip()

            if 'Date' in element.text:
                date = element.text.replace('Date:', '').strip()

        closed_verified = soup.find('i', {'class': 'mdi mdi-24px mdi-close'})

        if ebd_id is None or type is None or platform is None or date is None:
            logging.info(
                "Parsing Process found None-Type. EBD-ID is {}, type is {}, platform is {} and date is {}".format(
                    ebd_id, type, platform, date))

        if closed_verified:
            ebd_verified = False
        else:
            ebd_verified = True

        try:
            content = soup.find('code').text
        except Exception:
            logging.info("Content for EBD-ID {} could not be parsed.".format(ebd_id))
            content = None
        cve_pattern = 'CVE-\d{4}-\d{4,7}'

        cve_match = re.findall(cve_pattern, soup.text)

        cve = list(set(cve_match))

        if not cve:
            number_pattern = '\d{4}-\d{4,7}'
            cve_match = re.findall(number_pattern, soup.text)
            unique_cve = list(set(cve_match))
            cve = ['CVE-' + str(x) for x in unique_cve]
        entry = {
            'exploit_id': ebd_id,
            'title': title,
            'type': type,
            'platform': platform,
            'published_at': date,
            'created_at': datetime.utcnow(),
            'ebd_verified': ebd_verified,
            'cve_ids': cve,
            'src': 'exploit-db',
            'content': content,
        }
        return entry

    @staticmethod
    def entry_to_db(entry):
        collection.insert_one(entry)

    @staticmethod
    def exploit_to_db(exploit):
        exploit = Exploit(exploit)
        request = exploit.request_exploit_data()
        element = exploit.parse_exploit_data(request)

    @staticmethod
    def get_exploit_from_db(exploit):
        element = collection.find_one({'exploit_id': exploit})
        if element:
            return element, True
        else:
            return None, False


class ExploitDSL:
    def __init__(self, type, exploit_id, risk, platform):
        self.type = type
        self.exploit_id = exploit_id
        self.risk = risk
        self.platform = platform
        self.status = False

    def change_type(self, new_type):
        self.type = new_type
        return self

    def change_exploit_id(self, new_exploit_id):
        self.exploit_id = new_exploit_id
        return self

    def change_risk(self, new_risk):
        self.risk = new_risk
        return self

    def change_platform(self, new_platform):
        self.platform = new_platform
        return self

    def is_vulnerable(self, status):
        self.status = status
        if status == True:
            print('Status changed. The vulnerability is vulnerable on the system.')
        else:
            print('Status changed. The vulnerability is not vulnerable on the system.')
        return self

    def __str__(self):
        return "The exploit id {} has the type {} and is vulnerable on the platform {}" \
               ". The vulnerability risk is {}. The status on the system is_vulnerable is: {}".format(self.exploit_id, self.type, self.platform, self.risk, self.status)



    